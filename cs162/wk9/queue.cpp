#include <iostream>
#include "queue.hpp"

/**************************************************************************************************
*						constructor
*
***************************************************************************************************/
Queue::Queue()
{
	front = NULL;
	rear = NULL;
}

/**************************************************************************************************
*						destructor
*
***************************************************************************************************/
Queue::~Queue()
{
	// clear();
}

/**************************************************************************************************
*						addBack
*
***************************************************************************************************/
void Queue::addBack(int num)
{
	if (isEmpty())
	{
		front = new QueueNode(num);
		rear = front;
	}
	
	else
	{
		rear->next = new QueueNode(num);
		rear = rear->next;
	}
}

/**************************************************************************************************
*						getFront
*
***************************************************************************************************/
int Queue::getFront()
{
	int value;
	
	Queue *temp;
	if (isEmpty())
	{
		std::cout << "The queue is empty." << std::endl;
		exit(1);
	}
	
	else
	{
		value = front->value;
		return value;
	}
}

/**************************************************************************************************
*						removeFront
*
***************************************************************************************************/
void Queue::removeFront()
{
	if (isEmpty())
	{
		std::cout << "The queue is empty." << std::endl;
		exit(1);
	}
	
	else
	{
		front = front->next;
	}
}

/**************************************************************************************************
*						isEmpty
*
***************************************************************************************************/
bool Queue::isEmpty() const
{
	if (front == NULL)
		return true;
	else
		return false;
}
